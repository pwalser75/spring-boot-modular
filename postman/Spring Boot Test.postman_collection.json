{
	"info": {
		"_postman_id": "0d02387b-bce8-4eb8-bf87-708598f3eed0",
		"name": "Spring Boot Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "App",
			"item": [
				{
					"name": "Get App Info",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "24b3a4eb-ac1d-44d6-8f72-845ea88d0f1a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "60b1c26b-ddb9-4a53-aff0-2980fbcd0862",
								"exec": [
									"var expectedStatus=200;\r",
									"tests[\"Expecting response code \"+expectedStatus+\", got: \"+responseCode.code] = responseCode.code === expectedStatus;\r",
									"\r",
									"if (responseCode.code === expectedStatus){\r",
									"    var info = pm.response.json();\r",
									"    \r",
									"    var app = info.app;\r",
									"    tests[\"has app info\"] = app;\r",
									"    if (app) {\r",
									"         tests[\"name: \"+app.name] = app.name;\r",
									"         tests[\"description: \"+app.description] = app.description;\r",
									"         tests[\"version: \"+app.version] = app.version;\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{HOST}}/info",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"info"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get App Health",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "24b3a4eb-ac1d-44d6-8f72-845ea88d0f1a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "60b1c26b-ddb9-4a53-aff0-2980fbcd0862",
								"exec": [
									"var expectedStatus=200;\r",
									"tests[\"Expecting response code \"+expectedStatus+\", got: \"+responseCode.code] = responseCode.code === expectedStatus;\r",
									"\r",
									"if (responseCode.code === expectedStatus){\r",
									"    \r",
									"    var health = pm.response.json();\r",
									"    \r",
									"    var optional = (v,f1, f2, f3, f4, f5) => {\r",
									"        for (var f of [f1,f2,f3,f4,f5]) {\r",
									"            if (f) {\r",
									"                v = f? (v? f(v) : undefined) : v;\r",
									"            }\r",
									"        }\r",
									"        return v;\r",
									"    };\r",
									"    \r",
									"    var details = health.details;\r",
									"    var db = optional(details, x => x.db);\r",
									"    \r",
									"    tests[\"status is UP\"] = health.status === 'UP';\r",
									"    tests[\"db status is UP\"]  = optional(health, x=>x.details, x=>x.db, x=>x.status) === 'UP';\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{HOST}}/health",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get App Metrics Uptime",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "24b3a4eb-ac1d-44d6-8f72-845ea88d0f1a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "60b1c26b-ddb9-4a53-aff0-2980fbcd0862",
								"exec": [
									"var expectedStatus=200;\r",
									"tests[\"Expecting response code \"+expectedStatus+\", got: \"+responseCode.code] = responseCode.code === expectedStatus;\r",
									"\r",
									"if (responseCode.code === expectedStatus){\r",
									"    \r",
									"    var metrics = pm.response.json();\r",
									"    var uptime = metrics.measurements? metrics.measurements[0].value : undefined;\r",
									"    \r",
									"    tests[\"uptime: \"+uptime+\" \"+metrics.baseUnit] = uptime >= 0;\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{HOST}}/metrics/process.uptime",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"metrics",
								"process.uptime"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Notes",
			"item": [
				{
					"name": "Add Note",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "24b3a4eb-ac1d-44d6-8f72-845ea88d0f1a",
								"exec": [
									"var text = \"Lorem ipsum \"+new Date().toISOString();\r",
									"pm.globals.set(\"note-text\", text);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "60b1c26b-ddb9-4a53-aff0-2980fbcd0862",
								"exec": [
									"var expectedStatus=201;\r",
									"tests[\"Expecting response code \"+expectedStatus+\", got: \"+responseCode.code] = responseCode.code === expectedStatus;\r",
									"\r",
									"if (responseCode.code === expectedStatus){\r",
									"    var note = pm.response.json();\r",
									"    \r",
									"    var content=note.content;\r",
									"    tests[\"has id\"] = note.id;\r",
									"    tests[\"has creationDate\"] = note.creationDate;\r",
									"    tests[\"has modificationDate\"] = note.modificationDate;\r",
									"    tests[\"has text\"] = note.text;\r",
									"    tests[\"has correct text\"] = note.text === pm.globals.get(\"note-text\");\r",
									"    \r",
									"    pm.globals.set(\"note-id\", note.id);\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"text\": \"{{note-text}}\"\n}"
						},
						"url": {
							"raw": "{{HOST}}/api/notes",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Note",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "24b3a4eb-ac1d-44d6-8f72-845ea88d0f1a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "60b1c26b-ddb9-4a53-aff0-2980fbcd0862",
								"exec": [
									"var expectedStatus=200;\r",
									"tests[\"Expecting response code \"+expectedStatus+\", got: \"+responseCode.code] = responseCode.code === expectedStatus;\r",
									"\r",
									"if (responseCode.code === expectedStatus){\r",
									"    var note = pm.response.json();\r",
									"    \r",
									"    var content=note.content;\r",
									"    tests[\"has correct id\"] = note.id ===  pm.globals.get(\"note-id\")\r",
									"    tests[\"has creationDate\"] = note.creationDate;\r",
									"    tests[\"has correct text\"] = note.text === pm.globals.get(\"note-text\");\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{HOST}}/api/notes/{{note-id}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"notes",
								"{{note-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Notes",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "24b3a4eb-ac1d-44d6-8f72-845ea88d0f1a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "60b1c26b-ddb9-4a53-aff0-2980fbcd0862",
								"exec": [
									"var expectedStatus=200;\r",
									"tests[\"Expecting response code \"+expectedStatus+\", got: \"+responseCode.code] = responseCode.code === expectedStatus;\r",
									"\r",
									"if (responseCode.code === expectedStatus){\r",
									"    var notes = pm.response.json();\r",
									"    \r",
									"    tests[\"has notes\"] = notes.length > 0;\r",
									"    \r",
									"    var note = notes.find(n=>n.id === pm.globals.get(\"note-id\"));\r",
									"    \r",
									"    tests[\"contains note:\"] = note;\r",
									"    if (note) {\r",
									"      tests[\"has correct id\"] = note.id ===  pm.globals.get(\"note-id\")\r",
									"      tests[\"has creationDate\"] = note.creationDate;\r",
									"      tests[\"has text\"] = note.text;\r",
									"      tests[\"has correct text\"] = note.text === pm.globals.get(\"note-text\");\r",
									"    }\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{HOST}}/api/notes",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Note",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "24b3a4eb-ac1d-44d6-8f72-845ea88d0f1a",
								"exec": [
									"var text = \"Changed test \"+new Date().toISOString();\r",
									"pm.globals.set(\"note-text\", text);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "60b1c26b-ddb9-4a53-aff0-2980fbcd0862",
								"exec": [
									"var expectedStatus=204;\r",
									"tests[\"Expecting response code \"+expectedStatus+\", got: \"+responseCode.code] = responseCode.code === expectedStatus;\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"text\": \"{{note-text}}\"\n}"
						},
						"url": {
							"raw": "{{HOST}}/api/notes/{{note-id}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"notes",
								"{{note-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Note Updated",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "24b3a4eb-ac1d-44d6-8f72-845ea88d0f1a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "60b1c26b-ddb9-4a53-aff0-2980fbcd0862",
								"exec": [
									"var expectedStatus=200;\r",
									"tests[\"Expecting response code \"+expectedStatus+\", got: \"+responseCode.code] = responseCode.code === expectedStatus;\r",
									"\r",
									"if (responseCode.code === expectedStatus){\r",
									"    var note = pm.response.json();\r",
									"    \r",
									"    var content=note.content;\r",
									"    tests[\"has correct id\"] = note.id ===  pm.globals.get(\"note-id\")\r",
									"    tests[\"has creationDate\"] = note.creationDate;\r",
									"    tests[\"has modificationDate\"] = note.modificationDate;\r",
									"    tests[\"has correct text\"] = note.text === pm.globals.get(\"note-text\");\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{HOST}}/api/notes/{{note-id}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"notes",
								"{{note-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Note",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f4a8c2c-b8e4-4e26-81b2-933a44c721fd",
								"exec": [
									"var expectedStatus=204;\r",
									"tests[\"Expecting response code \"+expectedStatus+\", got: \"+responseCode.code] = responseCode.code === expectedStatus;\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{HOST}}/api/notes/{{note-id}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"notes",
								"{{note-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Note Deleted",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "24b3a4eb-ac1d-44d6-8f72-845ea88d0f1a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "60b1c26b-ddb9-4a53-aff0-2980fbcd0862",
								"exec": [
									"var expectedStatus=404;\r",
									"tests[\"Expecting response code \"+expectedStatus+\", got: \"+responseCode.code] = responseCode.code === expectedStatus;\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{HOST}}/api/notes/{{note-id}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"notes",
								"{{note-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Note Removed",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "24b3a4eb-ac1d-44d6-8f72-845ea88d0f1a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "60b1c26b-ddb9-4a53-aff0-2980fbcd0862",
								"exec": [
									"var expectedStatus=200;\r",
									"tests[\"Expecting response code \"+expectedStatus+\", got: \"+responseCode.code] = responseCode.code === expectedStatus;\r",
									"\r",
									"if (responseCode.code === expectedStatus){\r",
									"    var notes = pm.response.json();\r",
									"    var note = notes.find(n=>n.id === pm.globals.get(\"note-id\"));\r",
									"    \r",
									"    tests[\"does not contain note: \"] = !note ;\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{HOST}}/api/notes",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Note Validation - Not Null",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "24b3a4eb-ac1d-44d6-8f72-845ea88d0f1a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "60b1c26b-ddb9-4a53-aff0-2980fbcd0862",
								"exec": [
									"var expectedStatus=400;\r",
									"tests[\"Expecting response code \"+expectedStatus+\", got: \"+responseCode.code] = responseCode.code === expectedStatus;\r",
									"\r",
									"if (responseCode.code === expectedStatus){\r",
									"    var errors = pm.response.json();\r",
									"    \r",
									"    tests[\"NotNull\"] = errors.find(e => e.code.indexOf('NotNull') > 0);\r",
									"    tests[\"NotBlank\"] = errors.find(e => e.code.indexOf('NotBlank') > 0);\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{HOST}}/api/notes",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Note Validation - Not Blank",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "24b3a4eb-ac1d-44d6-8f72-845ea88d0f1a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "60b1c26b-ddb9-4a53-aff0-2980fbcd0862",
								"exec": [
									"var expectedStatus=400;\r",
									"tests[\"Expecting response code \"+expectedStatus+\", got: \"+responseCode.code] = responseCode.code === expectedStatus;\r",
									"\r",
									"if (responseCode.code === expectedStatus){\r",
									"    var errors = pm.response.json();\r",
									"    \r",
									"    tests[\"NotBlank\"] = errors.find(e => e.code.indexOf('NotBlank') > 0);\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"text\": \"\"\n}"
						},
						"url": {
							"raw": "{{HOST}}/api/notes",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Note Validation - Text too long",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "24b3a4eb-ac1d-44d6-8f72-845ea88d0f1a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "60b1c26b-ddb9-4a53-aff0-2980fbcd0862",
								"exec": [
									"var expectedStatus=400;\r",
									"tests[\"Expecting response code \"+expectedStatus+\", got: \"+responseCode.code] = responseCode.code === expectedStatus;\r",
									"\r",
									"if (responseCode.code === expectedStatus){\r",
									"    var errors = pm.response.json();\r",
									"    \r",
									"    tests[\"no NotBlank\"] = !errors.find(e => e.code.indexOf('NotBlank') > 0);\r",
									"    tests[\"Size\"] = errors.find(e => e.code.indexOf('Size') > 0);\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"text\": \"01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789x\"\n}"
						},
						"url": {
							"raw": "{{HOST}}/api/notes",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"notes"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}