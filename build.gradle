import java.time.OffsetDateTime
import java.time.temporal.ChronoUnit

plugins {
    id 'com.github.ben-manes.versions' version '0.27.0'
    id 'org.kordamp.gradle.apidoc' version '0.29.0'
    id 'com.avast.gradle.docker-compose' version '0.9.5'
    id 'net.ltgt.apt' version '0.21'
    id 'org.springframework.boot' version '2.2.1.RELEASE'
}

description = 'Spring Boot Modular Project'

defaultTasks 'clean', 'build', 'install', 'publishToMavenLocal'

def buildDate = OffsetDateTime.now().truncatedTo(ChronoUnit.SECONDS)

allprojects {
    group = 'ch.frostnova.spring-multimodule'
}
subprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'

    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
    }
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
    plugins.withType(JavaPlugin) {
        jar {
            manifest {
                attributes(
                        "Name": project.name,
                        "Version": project.version,
                        "Build-Date": buildDate
                )
            }
        }
    }

    if (!project.hasProperty('quick')) {
        task sourcesJar(type: Jar, dependsOn: classes) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        artifacts {
            archives sourcesJar
        }
    }

    clean {
        delete "./out"
        delete "./logs"
        delete "./db"
    }

    test {
        useJUnitPlatform()
    }

    javadoc.onlyIf { !project.hasProperty('quick') }
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn subprojects*.test
}

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'pr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]$qualifier[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

build.dependsOn testReport

ext {
    springBootVersion = '2.2.1.RELEASE'
    junitVersion = '5.5.2'
    mockitoVersion = '3.1.0'
    logstashLogbackVersion = '6.2'
    janinoVersion = '3.1.0'
    micrometerVersion = '1.3.1'
    h2Version = '1.4.200'
    liquibaseVersion = '3.8.1'
    swaggerVersion = '2.9.2'
    jacksonVersion = '2.10.0'
    jerseyVersion = '2.29.1'
    javaValidationVersion = '2.0.1.Final'
    mysqlDriverVersion = '8.0.18'
    hibernateVersion = '5.4.8.Final'

    libs = [
            api                   : [
                    "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion",
                    "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",
                    "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion",
                    "javax.validation:validation-api:$javaValidationVersion",
                    "io.springfox:springfox-swagger2:$swaggerVersion",
            ],
            testbase              : [
                    "org.junit.jupiter:junit-jupiter-engine:$junitVersion",
                    "org.mockito:mockito-core:$mockitoVersion",
                    "org.glassfish.jersey.core:jersey-client:$jerseyVersion",
                    "org.glassfish.jersey.media:jersey-media-json-jackson:$jerseyVersion",
                    "org.glassfish.jersey.inject:jersey-hk2:$jerseyVersion"
            ],
            springBoot            : [
                    "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion",
                    "org.springframework.boot:spring-boot-starter-web:$springBootVersion",
                    "org.springframework.boot:spring-boot-starter-actuator:$springBootVersion",
                    "net.logstash.logback:logstash-logback-encoder:$logstashLogbackVersion",
                    "org.codehaus.janino:janino:$janinoVersion",
                    "io.micrometer:micrometer-registry-prometheus:$micrometerVersion",
                    "io.springfox:springfox-swagger-ui:$swaggerVersion",
                    "mysql:mysql-connector-java:$mysqlDriverVersion",
                    "com.h2database:h2:$h2Version"

            ],
            springBootTest        : [
                    dependencies.create("org.springframework.boot:spring-boot-starter-test:$springBootVersion") {
                        exclude module: 'junit' // exclude JUnit 4 as we want to use JUnit 5
                    }
            ],
            springBootDevTools    : [
                    "org.springframework.boot:spring-boot-devtools:$springBootVersion"
            ],
            liquibase             : [
                    dependencies.create("org.liquibase:liquibase-core:$liquibaseVersion") {
                        exclude module: 'snakeyaml' // 1.18 clashes with 1.23 from spring boot 2.1.5
                    }
            ],
            jpaAnnotationProcessor: [
                    "org.hibernate:hibernate-jpamodelgen:$hibernateVersion"
            ]
    ]
}

task start(dependsOn: ['assemble', ':app:bootRun']) {
    group = 'Start/Run'
    description = 'Start the boot app'
}


