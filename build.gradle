import java.time.OffsetDateTime
import java.time.temporal.ChronoUnit

plugins {
    id 'com.github.ben-manes.versions' version '0.38.0'
    id 'com.avast.gradle.docker-compose' version '0.14.3'
    id 'net.ltgt.apt' version '0.21'
}

description = 'Spring Boot Modular Project'

defaultTasks 'clean', 'build', 'publishToMavenLocal'

apply from: 'libs.gradle'

allprojects {
    group = 'ch.frostnova.spring-multimodule'

    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
    }
}
subprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    jar {
        manifest {
            attributes(
                    "Name": project.name,
                    "Version": project.version,
                    "Build-Date": OffsetDateTime.now().truncatedTo(ChronoUnit.SECONDS)
            )
        }
    }

    publishing {
        repositories {
            maven {
                url = "file://${project.rootDir}/repository/" + (version.endsWith('SNAPSHOT') ? 'snapshots' : 'releases')
            }
        }
    }


    if (!project.hasProperty('quick')) {
        task sourcesJar(type: Jar, dependsOn: classes) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        artifacts {
            archives sourcesJar
        }
    }

    clean {
        delete "./out"
        delete "./logs"
        delete "./db"
    }

    test {
        useJUnitPlatform()
    }

    javadoc.onlyIf { !project.hasProperty('quick') }
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn subprojects*.test
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

dependencyUpdates {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}


task start(dependsOn: ['app:assemble', ':app:bootRun']) {
    group = 'Start/Run'
    description = 'Start the boot app'
}
