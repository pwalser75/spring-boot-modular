import java.time.OffsetDateTime
import java.time.temporal.ChronoUnit

plugins {
    id 'com.github.ben-manes.versions' version '0.28.0'
    id 'com.avast.gradle.docker-compose' version '0.10.9'
    id 'net.ltgt.apt' version '0.21'
}

description = 'Spring Boot Modular Project'

defaultTasks 'clean', 'build', 'publishToMavenLocal'

def buildDate = OffsetDateTime.now().truncatedTo(ChronoUnit.SECONDS)

allprojects {
    group = 'ch.frostnova.spring-multimodule'

    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
    }
}
subprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    jar {
        manifest {
            attributes(
                    "Name": project.name,
                    "Version": project.version,
                    "Build-Date": buildDate
            )
        }
    }

    publishing {
        repositories {
            maven {
                url = "file://${project.rootDir}/repository/" + (version.endsWith('SNAPSHOT') ? 'snapshots' : 'releases')
            }
        }
    }


    if (!project.hasProperty('quick')) {
        task sourcesJar(type: Jar, dependsOn: classes) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        artifacts {
            archives sourcesJar
        }
    }

    clean {
        delete "./out"
        delete "./logs"
        delete "./db"
    }

    test {
        useJUnitPlatform()
    }

    javadoc.onlyIf { !project.hasProperty('quick') }
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn subprojects*.test
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

dependencyUpdates {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}

ext {
    springBootVersion = '2.2.5.RELEASE'
    junitVersion = '5.6.0'
    mockitoVersion = '3.3.1'
    logstashLogbackVersion = '6.3'
    janinoVersion = '3.1.0'
    micrometerVersion = '1.3.5'
    h2Version = '1.4.200'
    liquibaseVersion = '3.8.7'
    swaggerVersion = '2.9.2'
    jacksonVersion = '2.10.3'
    jerseyVersion = '2.30.1'
    javaValidationVersion = '2.0.1.Final'
    mysqlDriverVersion = '8.0.19'
    hibernateVersion = '5.4.12.Final'
    jjwtVersion = '0.9.1'
    javaCacheVersion = '1.1.1'
    ehcacheVersion = '3.8.1'

    libs = [
            api                   : [
                    "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion",
                    "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",
                    "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion",
                    "javax.validation:validation-api:$javaValidationVersion",
                    "io.springfox:springfox-swagger2:$swaggerVersion",
            ],
            testbase              : [
                    "org.junit.jupiter:junit-jupiter:$junitVersion",
                    "org.mockito:mockito-core:$mockitoVersion",
                    "org.glassfish.jersey.core:jersey-client:$jerseyVersion",
                    "org.glassfish.jersey.media:jersey-media-json-jackson:$jerseyVersion",
                    "org.glassfish.jersey.inject:jersey-hk2:$jerseyVersion"
            ],
            springBoot            : [
                    "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion",
                    "org.springframework.boot:spring-boot-starter-web:$springBootVersion",
                    "org.springframework.boot:spring-boot-starter-actuator:$springBootVersion",
                    "org.springframework.boot:spring-boot-starter-security:$springBootVersion",
                    "org.springframework.boot:spring-boot-starter-cache:$springBootVersion",
                    "net.logstash.logback:logstash-logback-encoder:$logstashLogbackVersion",
                    "org.codehaus.janino:janino:$janinoVersion",
                    "io.micrometer:micrometer-registry-prometheus:$micrometerVersion",
                    "io.springfox:springfox-swagger-ui:$swaggerVersion",
                    "mysql:mysql-connector-java:$mysqlDriverVersion",
                    "com.h2database:h2:$h2Version",
                    "javax.cache:cache-api:$javaCacheVersion",
                    "org.ehcache:ehcache:$ehcacheVersion"

            ],
            springBootTest        : [
                    dependencies.create("org.springframework.boot:spring-boot-starter-test:$springBootVersion") {
                        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
                    }
            ],
            springBootDevTools    : [
                    "org.springframework.boot:spring-boot-devtools:$springBootVersion"
            ],
            liquibase             : [
                    dependencies.create("org.liquibase:liquibase-core:$liquibaseVersion") {
                        exclude module: 'snakeyaml' // 1.18 clashes with 1.23 from spring boot 2.1.5
                    }
            ],
            jpaAnnotationProcessor: [
                    "org.hibernate:hibernate-jpamodelgen:$hibernateVersion"
            ],
            jwt                   : [
                    "io.jsonwebtoken:jjwt:${jjwtVersion}"
            ]
    ]
}

task start(dependsOn: ['app:assemble', ':app:bootRun']) {
    group = 'Start/Run'
    description = 'Start the boot app'
}
