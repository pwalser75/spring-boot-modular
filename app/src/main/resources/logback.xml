<configuration>

    <shutdownHook class="ch.qos.logback.core.hook.DelayingShutdownHook"/>

    <springProperty scope="context" name="LOGSTASH" source="logstash.servers"/>
    <springProperty scope="context" name="APP_NAME" source="info.app.name"/>
    <springProperty scope="context" name="APP_VERSION" source="info.app.version"/>

    <!-- console appender -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} %-5level %replace(| %X{tenant}/%X{user} ){'\| / ',''}| %logger{50} - %msg%n
            </pattern>
        </encoder>
    </appender>

    <!-- rolling file appender: create one file per day, keep logs of last 30 days, max. 100 MB -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>logs/server.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>logs/archive/test.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>30</maxHistory>
            <totalSizeCap>100MB</totalSizeCap>
        </rollingPolicy>

        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %replace(| %X{tenant}/%X{user} ){'\| / ',''}| %logger{50} -
                %msg%n
            </pattern>
        </encoder>
    </appender>

    <!-- log access info to another file -->
    <appender name="ACCESS" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>logs/access.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>logs/archive/access.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>30</maxHistory>
            <totalSizeCap>100MB</totalSizeCap>
        </rollingPolicy>

        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %replace(| %X{tenant}/%X{user}){'\| /',''} - %msg%n</pattern>
        </encoder>
    </appender>


    <!-- log performance info to another file -->
    <appender name="PERFORMANCE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>logs/performance.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>logs/archive/performance.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>10</maxHistory>
            <totalSizeCap>100MB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} - %msg%n</pattern>
        </encoder>
    </appender>

    <if condition='isDefined("logstash.servers")'>
        <then>
            <appender name="STASH" class="net.logstash.logback.appender.LogstashTcpSocketAppender">
                <keepAliveDuration>5 minutes</keepAliveDuration>
                <reconnectionDelay>10 second</reconnectionDelay>
                <waitStrategyType>sleeping</waitStrategyType>
                <ringBufferSize>16384</ringBufferSize>
                <destination>${LOGSTASH}</destination>
                <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
                    <providers>
                        <mdc/> <!-- MDC variables on the Thread will be written as JSON fields-->
                        <context/> <!--Outputs entries from logback's context -->
                        <logLevel/>
                        <loggerName/>

                        <pattern>
                            <pattern>
                                {
                                "appName": "${APP_NAME}",
                                "appVersion": "${APP_VERSION}"
                                }
                            </pattern>
                        </pattern>

                        <threadName/>
                        <message/>

                        <logstashMarkers/> <!-- Useful so we can add extra information for specific log lines as Markers-->
                        <arguments/> <!--or through StructuredArguments-->

                        <stackTrace>
                            <fieldName>stackTrace</fieldName>
                            <throwableConverter class="net.logstash.logback.stacktrace.ShortenedThrowableConverter">
                                <exclude>net\.sf\.cglib\..*</exclude>
                                <maxDepthPerThrowable>30</maxDepthPerThrowable>
                                <rootCauseFirst>true</rootCauseFirst>
                            </throwableConverter>
                        </stackTrace>
                    </providers>
                </encoder>
            </appender>
        </then>
    </if>

    <!-- log level configurations per package or class -->
    <logger name="io.swagger" level="error"/>
    <logger name="org.hibernate" level="warn"/>
    <logger name="liquibase" level="warn"/>
    <logger name="springfox" level="warn"/>
    <logger name="com.zaxxer.hikari" level="warn"/>
    <!--
    <logger name="org.springframework.boot.autoconfigure" level="debug"/>
    <logger name="org.hibernate.SQL" level="debug"/>liquibase
    -->

    <logger name="ch.frostnova.spring.boot.platform.web.filter.AccessLogFilter" level="info" additivity="false">
        <appender-ref ref="ACCESS"/>
        <appender-ref ref="CONSOLE"/>
    </logger>

    <logger name="ch.frostnova.spring.boot.platform.aspect.PerformanceLoggingAspect" level="info" additivity="false">
        <appender-ref ref="PERFORMANCE"/>
        <appender-ref ref="CONSOLE"/>
    </logger>

    <!-- root logger: log everything with level info and above to console and file -->
    <root level="info">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="FILE"/>
        <if condition='isDefined("logstash.servers")'>
            <then>
                <appender-ref ref="STASH"/>
            </then>
        </if>
    </root>

</configuration>
